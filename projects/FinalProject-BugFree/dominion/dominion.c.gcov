        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1834 returned 100% blocks executed 85%
     1834:    8:int compare(const void* a, const void* b) {
     1834:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
     1834:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      655:   12:        return -1;
     1179:   13:    return 0;
     1834:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 32 returned 100% blocks executed 93%
       32:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       32:   44:    SelectStream(1);
       32:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       32:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       32:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      352:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     3520:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     3200:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     3200:   65:        }
      320:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       32:   73:    if (numPlayers == 2)
branch  0 taken 97%
branch  1 taken 3%
        -:   74:    {
       31:   75:        state->supplyCount[curse] = 10;
       31:   76:    }
        1:   77:    else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
        1:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       32:   87:    if (numPlayers == 2)
branch  0 taken 97%
branch  1 taken 3%
        -:   88:    {
       31:   89:        state->supplyCount[estate] = 8;
       31:   90:        state->supplyCount[duchy] = 8;
       31:   91:        state->supplyCount[province] = 8;
       31:   92:    }
        -:   93:    else
        -:   94:    {
        1:   95:        state->supplyCount[estate] = 12;
        1:   96:        state->supplyCount[duchy] = 12;
        1:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       32:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       32:  102:    state->supplyCount[silver] = 40;
       32:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      672:  106:    for (i = adventurer; i <= treasure_map; i++)           //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     5442:  108:        for (j = 0; j < 10; j++)                   //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     5103:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      301:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 6%
branch  3 taken 94%
        -:  114:                {
       32:  115:                    if (numPlayers == 2) {
branch  0 taken 100%
branch  1 taken 0%
       32:  116:                        state->supplyCount[i] = 8;
       32:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
       32:  121:                }
        -:  122:                else
        -:  123:                {
      269:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      301:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     4802:  130:                state->supplyCount[i] = -1;
        -:  131:            }
     4802:  132:        }
        -:  133:
      640:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      163:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  141:    {
      131:  142:        state->deckCount[i] = 0;
      524:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
      393:  145:            state->deck[i][j] = estate;
      393:  146:            state->deckCount[i]++;
      393:  147:        }
     1048:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
      917:  150:            state->deck[i][j] = copper;
      917:  151:            state->deckCount[i]++;
      917:  152:        }
      131:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      163:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  157:    {
      131:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
      131:  162:    }
        -:  163:
        -:  164:    //draw player hands
      163:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  166:    {
        -:  167:        //initialize hand size to zero
      131:  168:        state->handCount[i] = 0;
      131:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //    {
        -:  173:        //      drawCard(i, state);
        -:  174:        //    }
      131:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      896:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
      864:  180:        state->embargoTokens[i] = 0;
      864:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       32:  184:    state->outpostPlayed = 0;
       32:  185:    state->phase = 0;
       32:  186:    state->numActions = 1;
       32:  187:    state->numBuys = 1;
       32:  188:    state->playedCardCount = 0;
       32:  189:    state->whoseTurn = 0;
       32:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      192:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      160:  195:        drawCard(state->whoseTurn, state);
      160:  196:    }
        -:  197:
       32:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       32:  200:    return 0;
       32:  201:}
        -:  202:
function shuffle called 131 returned 100% blocks executed 93%
      131:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
      131:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
      131:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:        return -1;
      131:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     1441:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     1310:  217:        card = floor(Random() * state->deckCount[player]);
     1310:  218:        newDeck[newDeckPos] = state->deck[player][card];
     1310:  219:        newDeckPos++;
     4494:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     3184:  221:            state->deck[player][i] = state->deck[player][i+1];
     3184:  222:        }
     1310:  223:        state->deckCount[player]--;
        -:  224:    }
     1441:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     1310:  226:        state->deck[player][i] = newDeck[i];
     1310:  227:        state->deckCount[player]++;
     1310:  228:    }
        -:  229:
      131:  230:    return 0;
      131:  231:}
        -:  232:
function playCard called 5 returned 100% blocks executed 66%
        5:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
        5:  236:    int coin_bonus = 0;         //tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
        5:  239:    if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:   //check if player has enough actions
        5:  245:    if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
        5:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
        5:  254:    if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
        5:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
        5:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
        5:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:    
        5:  271:    return 0;
        5:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 15 returned 100% blocks executed 100%
       15:  313:int numHandCards(struct gameState *state) {
       15:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 5 returned 100% blocks executed 100%
        5:  317:int handCard(int handPos, struct gameState *state) {
        5:  318:    int currentPlayer = whoseTurn(state);
        5:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 20 returned 100% blocks executed 100%
       20:  322:int supplyCount(int card, struct gameState *state) {
       20:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 129 returned 100% blocks executed 100%
      129:  348:int whoseTurn(struct gameState *state) {
      129:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 70%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
        5:  422:    int score = 0;
        -:  423:    //score from hand
       30:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  425:    {
       25:  426:        if (state->hand[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  427:            score = score - 1;
    #####:  428:        };
       25:  429:        if (state->hand[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       25:  430:            score = score + 1;
       25:  431:        };
       25:  432:        if (state->hand[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  433:            score = score + 3;
    #####:  434:        };
       25:  435:        if (state->hand[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  436:            score = score + 6;
    #####:  437:        };
       25:  438:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  439:            score = score + 1;
    #####:  440:        };
       25:  441:        if (state->hand[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
       25:  444:    }
        -:  445:
        -:  446:    //score from discard
       30:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  448:    {
       25:  449:        if (state->discard[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  450:            score = score - 1;
    #####:  451:        };
       25:  452:        if (state->discard[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       25:  453:            score = score + 1;
       25:  454:        };
       25:  455:        if (state->discard[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  456:            score = score + 3;
    #####:  457:        };
       25:  458:        if (state->discard[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  459:            score = score + 6;
    #####:  460:        };
       25:  461:        if (state->discard[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  462:            score = score + 1;
    #####:  463:        };
       25:  464:        if (state->discard[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
       25:  467:    }
        -:  468:
        -:  469:    //score from deck
       55:  470:    for (i = 0; i < state->deckCount[player]; i++) // bug fixed! changed discardCount to deckCount
branch  0 taken 91%
branch  1 taken 9%
        -:  471:    {
       50:  472:        if (state->deck[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  473:            score = score - 1;
    #####:  474:        };
       50:  475:        if (state->deck[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       50:  476:            score = score + 1;
       50:  477:        };
       50:  478:        if (state->deck[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  479:            score = score + 3;
    #####:  480:        };
       50:  481:        if (state->deck[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  482:            score = score + 6;
    #####:  483:        };
       50:  484:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  485:            score = score + 1;
    #####:  486:        };
       50:  487:        if (state->deck[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
       50:  490:    }
        -:  491:
        5:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 168 returned 100% blocks executed 41%
      168:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
      168:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
    #####:  603:    }
        -:  604:
        -:  605:    else {
      168:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
      168:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
      168:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      168:  614:        state->deckCount[player]--;
      168:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
      168:  618:    return 0;
      168:  619:}
        -:  620:
function getCost called 5 returned 100% blocks executed 12%
        5:  621:int getCost(int cardNumber)
        -:  622:{
        5:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
        5:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
    #####:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        5:  682:}
        -:  683:
function cardEffect called 104 returned 100% blocks executed 33%
      104:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
      104:  691:    int currentPlayer = whoseTurn(state);
      104:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
      104:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
      104:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
      104:  698:    int z = 0;// this is the counter for the temp hand
      104:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  700:        nextPlayer = 0;
    #####:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
      104:  705:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 10%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 76%
branch 13 taken 5%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  706:    {
        -:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
    #####:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
        -:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
    #####:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
    #####:  744:            }
    #####:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
        -:  749:
    #####:  750:        return 0;
        -:  751:
        -:  752:    case feast:
        -:  753:        //gain card with cost up to 5
       10:  754:        x = 1;//Condition to loop on
        -:  755:
       15:  756:        while( x == 1) {//Buy one card
branch  0 taken 67%
branch  1 taken 33%
       10:  757:            if (supplyCount(choice1, state) <= 0) {
branch  0 taken 50%
branch  1 taken 50%
        -:  758:                if (DEBUG)
        -:  759:                    printf("None of that card left, sorry!\n");
        -:  760:
        -:  761:                if (DEBUG) {
        -:  762:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  763:                }
        5:  764:                printf("Invalid card choice. Not enough in the supply\n");
        5:  765:                return 2; // break out of infinite loop bug
        -:  766:            }
        5:  767:            else if (getCost(choice1) > 5) { // fixed to check against too expensive 5
branch  0 taken 0%
branch  1 taken 100%
    #####:  768:                printf("getCost(coice1): %d\n", getCost(choice1));
        -:  769:                
    #####:  770:                printf("That card is too expensive!\n");
        -:  771:
        -:  772:                if (DEBUG) {
        -:  773:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  774:                }
    #####:  775:                printf("Invalid card choice. Cost is greater than 5\n");
    #####:  776:                return 2; // break out of infinite loop bug
        -:  777:            }
        -:  778:            else {
        -:  779:                if (DEBUG) {
        -:  780:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  781:                }
        -:  782:
        5:  783:                gainCard(choice1, state, 2, currentPlayer);//Gain the card fixed 0 to 2 so they gain a card in hand
        5:  784:                x = 0;//No more buying cards
        -:  785:
        -:  786:                if (DEBUG) {
        -:  787:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  788:                }
        -:  789:
        -:  790:            }
        -:  791:        }
        -:  792:
        5:  793:        return 0;
        -:  794:
        -:  795:    case gardens:
    #####:  796:        return -1;
        -:  797:
        -:  798:    case mine:
    #####:  799:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  802:        {
    #####:  803:            return -1;
        -:  804:        }
        -:  805:
    #####:  806:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  807:        {
    #####:  808:            return -1;
        -:  809:        }
        -:  810:
    #####:  811:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  812:        {
    #####:  813:            return -1;
        -:  814:        }
        -:  815:
    #####:  816:        gainCard(choice2, state, 2, currentPlayer);
        -:  817:
        -:  818:        //discard card from hand
    #####:  819:        discardCard(handPos, currentPlayer, state, 0);
        -:  820:
        -:  821:        //discard trashed card
    #####:  822:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  823:        {
    #####:  824:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  825:            {
    #####:  826:                discardCard(i, currentPlayer, state, 0);
    #####:  827:                break;
        -:  828:            }
    #####:  829:        }
        -:  830:
    #####:  831:        return 0;
        -:  832:
        -:  833:    case remodel:
    #####:  834:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  835:
    #####:  836:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  837:        {
    #####:  838:            return -1;
        -:  839:        }
        -:  840:
    #####:  841:        gainCard(choice2, state, 0, currentPlayer);
        -:  842:
        -:  843:        //discard card from hand
    #####:  844:        discardCard(handPos, currentPlayer, state, 0);
        -:  845:
        -:  846:        //discard trashed card
    #####:  847:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  848:        {
    #####:  849:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  850:            {
    #####:  851:                discardCard(i, currentPlayer, state, 0);
    #####:  852:                break;
        -:  853:            }
    #####:  854:        }
        -:  855:
        -:  856:
    #####:  857:        return 0;
        -:  858:
        -:  859:    case smithy:
        -:  860:        //+3 Cards
    #####:  861:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  862:        {
    #####:  863:            drawCard(currentPlayer, state);
    #####:  864:        }
        -:  865:
        -:  866:        //discard card from hand
    #####:  867:        discardCard(handPos, currentPlayer, state, 0);
    #####:  868:        return 0;
        -:  869:
        -:  870:    case village:
        -:  871:        //+1 Card
    #####:  872:        drawCard(currentPlayer, state);
        -:  873:
        -:  874:        //+2 Actions
    #####:  875:        state->numActions = state->numActions + 2;
        -:  876:
        -:  877:        //discard played card from hand
    #####:  878:        discardCard(handPos, currentPlayer, state, 0);
    #####:  879:        return 0;
        -:  880:
        -:  881:    case baron:
       10:  882:        state->numBuys++;//Increase buys by 1!
       10:  883:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 100%
branch  1 taken 0%
       10:  884:            int p = 0;//Iterator for hand!
       10:  885:            int card_not_discarded = 1;//Flag for discard set!
       30:  886:            while(card_not_discarded) {
branch  0 taken 67%
branch  1 taken 33%
       20:  887:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 50%
branch  1 taken 50%
        -:  888:                    //state->coins += 4;//Add 4 coins to the amount of coins
       10:  889:                    *bonus += 4; // Bug fix Unit test 8
       10:  890:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       10:  891:                    state->discardCount[currentPlayer]++;
       45:  892:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 78%
branch  1 taken 22%
       35:  893:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
       35:  894:                    }
       10:  895:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       10:  896:                    state->handCount[currentPlayer]--;
       10:  897:                    card_not_discarded = 0;//Exit the loop
       10:  898:                }
       10:  899:                else if (p > state->handCount[currentPlayer]) {
branch  0 taken 0%
branch  1 taken 100%
        -:  900:                    if(DEBUG) {
        -:  901:                        printf("No estate cards in your hand, invalid choice\n");
        -:  902:                        printf("Must gain an estate if there are any\n");
        -:  903:                    }
    #####:  904:                    if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  905:                        gainCard(estate, state, 0, currentPlayer);
        -:  906:
    #####:  907:                        state->supplyCount[estate]--;//Decrement estates
    #####:  908:                        if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  909:                            isGameOver(state);
    #####:  910:                        }
    #####:  911:                    }
    #####:  912:                    card_not_discarded = 0;//Exit the loop
    #####:  913:                }
        -:  914:
        -:  915:                else {
       10:  916:                    p++;//Next card
        -:  917:                }
        -:  918:            }
       10:  919:        }
        -:  920:
        -:  921:        else {
    #####:  922:            if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  923:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  924:
    #####:  925:                state->supplyCount[estate]--;//Decrement Estates
    #####:  926:                if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  927:                    isGameOver(state);
    #####:  928:                }
    #####:  929:            }
        -:  930:        }
        -:  931:
        -:  932:
       10:  933:        return 0;
        -:  934:
        -:  935:    case great_hall:
        -:  936:        //+1 Card
    #####:  937:        drawCard(currentPlayer, state);
        -:  938:
        -:  939:        //+1 Actions
    #####:  940:        state->numActions++;
        -:  941:
        -:  942:        //discard card from hand
    #####:  943:        discardCard(handPos, currentPlayer, state, 0);
    #####:  944:        return 0;
        -:  945:
        -:  946:    case minion:
        -:  947:        //+1 action
    #####:  948:        state->numActions++;
        -:  949:
        -:  950:        //discard card from hand
    #####:  951:        discardCard(handPos, currentPlayer, state, 0);
        -:  952:
    #####:  953:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:            state->coins = state->coins + 2;
    #####:  956:        }
    #####:  957:        else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:        {
        -:  959:            //discard hand
    #####:  960:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  961:            {
    #####:  962:                discardCard(handPos, currentPlayer, state, 0);
        -:  963:            }
        -:  964:
        -:  965:            //draw 4
    #####:  966:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:            {
    #####:  968:                drawCard(currentPlayer, state);
    #####:  969:            }
        -:  970:
        -:  971:            //other players discard hand and redraw if hand size > 4
    #####:  972:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:            {
    #####:  974:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:                {
    #####:  976:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:                    {
        -:  978:                        //discard hand
    #####:  979:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:                        {
    #####:  981:                            discardCard(handPos, i, state, 0);
        -:  982:                        }
        -:  983:
        -:  984:                        //draw 4
    #####:  985:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:                        {
    #####:  987:                            drawCard(i, state);
    #####:  988:                        }
    #####:  989:                    }
    #####:  990:                }
    #####:  991:            }
        -:  992:
    #####:  993:        }
    #####:  994:        return 0;
        -:  995:
        -:  996:    case steward:
    #####:  997:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:        {
        -:  999:            //+2 cards
    #####: 1000:            drawCard(currentPlayer, state);
    #####: 1001:            drawCard(currentPlayer, state);
    #####: 1002:        }
    #####: 1003:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:        {
        -: 1005:            //+2 coins
    #####: 1006:            state->coins = state->coins + 2;
    #####: 1007:        }
        -: 1008:        else
        -: 1009:        {
        -: 1010:            //trash 2 cards in hand
    #####: 1011:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1012:            discardCard(choice3, currentPlayer, state, 1);
        -: 1013:        }
        -: 1014:
        -: 1015:        //discard card from hand
    #####: 1016:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1017:        return 0;
        -: 1018:
        -: 1019:    case tribute:
       79: 1020:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1021:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1022:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:                state->deckCount[nextPlayer]--;
    #####: 1024:            }
    #####: 1025:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1026:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:                state->discardCount[nextPlayer]--;
    #####: 1028:            }
        -: 1029:            else {
        -: 1030:                //No Card to Reveal
        -: 1031:                if (DEBUG) {
        -: 1032:                    printf("No cards to reveal\n");
        -: 1033:                }
        -: 1034:            }
    #####: 1035:        }
        -: 1036:
        -: 1037:        else {
       79: 1038:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1039:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1040:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:                    state->deckCount[nextPlayer]++;
    #####: 1042:                    state->discard[nextPlayer][i] = -1;
    #####: 1043:                    state->discardCount[nextPlayer]--;
    #####: 1044:                }
        -: 1045:
    #####: 1046:                shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1047:            }
       79: 1048:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       79: 1049:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       79: 1050:            state->deckCount[nextPlayer]--;
       79: 1051:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       79: 1052:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       79: 1053:            state->deckCount[nextPlayer]--;
        -: 1054:        }
        -: 1055:
       79: 1056:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 86%
branch  1 taken 14%
       68: 1057:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       68: 1058:            state->playedCardCount++;
       68: 1059:            tributeRevealedCards[1] = -1;
       68: 1060:        }
        -: 1061:
      239: 1062:        for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33%
      160: 1063:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 94%
branch  1 taken 6%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        9: 1064:                state->coins += 2;
        9: 1065:            }
        -: 1066:
      151: 1067:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 97%
branch  1 taken 3%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
        4: 1068:                drawCard(currentPlayer, state);
        4: 1069:                drawCard(currentPlayer, state);
        4: 1070:            }
        -: 1071:            // Bug Unit test 9 fix
      147: 1072:            else if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] <= treasure_map){ //Action Card
branch  0 taken 49%
branch  1 taken 51%
branch  2 taken 3%
branch  3 taken 97%
        2: 1073:                state->numActions = state->numActions + 2;
        2: 1074:            }
        -: 1075:            else{
        -: 1076:                if(DEBUG){
        -: 1077:                    printf("Second card is a duplicate card\n");
        -: 1078:                }
        -: 1079:            }
      160: 1080:        }
        -: 1081:
       79: 1082:        return 0;
        -: 1083:
        -: 1084:    case ambassador:
        5: 1085:        j = 0;        //used to check if player has enough cards to discard
        -: 1086:
        5: 1087:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1088:        {
    #####: 1089:            return -1;
        -: 1090:        }
        -: 1091:
        5: 1092:        if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1093:        {
    #####: 1094:            return -1;
        -: 1095:        }
        -: 1096:
       30: 1097:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1098:        {
       25: 1099:            if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 75%
branch  3 taken 25%
branch  4 taken 67%
branch  5 taken 33%
        -: 1100:            {
       10: 1101:                j++;
       10: 1102:            }
       25: 1103:        }
        5: 1104:        if (j < choice2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1105:        {
    #####: 1106:            return -1;
        -: 1107:        }
        -: 1108:
        -: 1109:        if (DEBUG)
        -: 1110:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1111:
        -: 1112:        //increase supply count for choosen card by amount being discarded
        5: 1113:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:
        -: 1115:        //each other player gains a copy of revealed card
       15: 1116:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1117:        {
       10: 1118:            if (i != currentPlayer)
branch  0 taken 50%
branch  1 taken 50%
        -: 1119:            {
        5: 1120:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        5: 1121:            }
       10: 1122:        }
        -: 1123:
        -: 1124:        //discard played card from hand
        5: 1125:        discardCard(handPos, currentPlayer, state, 0);
        -: 1126:
        -: 1127:        //trash copies of cards returned to supply
       15: 1128:        for (j = 0; j < choice2; j++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1129:        {
       20: 1130:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -: 1131:            {
       20: 1132:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 50%
branch  1 taken 50%
        -: 1133:                {
       10: 1134:                    discardCard(i, currentPlayer, state, 1);
       10: 1135:                    break;
        -: 1136:                }
       10: 1137:            }
       10: 1138:        }
        -: 1139:
        5: 1140:        return 0;
        -: 1141:
        -: 1142:    case cutpurse:
        -: 1143:
    #####: 1144:        updateCoins(currentPlayer, state, 2);
    #####: 1145:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:        {
    #####: 1147:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1148:            {
    #####: 1149:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1150:                {
    #####: 1151:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1152:                    {
    #####: 1153:                        discardCard(j, i, state, 0);
    #####: 1154:                        break;
        -: 1155:                    }
    #####: 1156:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1157:                    {
    #####: 1158:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1159:                        {
        -: 1160:                            if (DEBUG)
        -: 1161:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1162:                        }
    #####: 1163:                        break;
        -: 1164:                    }
    #####: 1165:                }
        -: 1166:
    #####: 1167:            }
        -: 1168:
    #####: 1169:        }
        -: 1170:
        -: 1171:        //discard played card from hand
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:
    #####: 1174:        return 0;
        -: 1175:
        -: 1176:
        -: 1177:    case embargo:
        -: 1178:        //+2 Coins
    #####: 1179:        state->coins = state->coins + 2;
        -: 1180:
        -: 1181:        //see if selected pile is in play
    #####: 1182:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:            return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        //add embargo token to selected supply pile
    #####: 1188:        state->embargoTokens[choice1]++;
        -: 1189:
        -: 1190:        //trash card
    #####: 1191:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1192:        return 0;
        -: 1193:
        -: 1194:    case outpost:
        -: 1195:        //set outpost flag
    #####: 1196:        state->outpostPlayed++;
        -: 1197:
        -: 1198:        //discard card
    #####: 1199:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:        return 0;
        -: 1201:
        -: 1202:    case salvager:
        -: 1203:        //+1 buy
    #####: 1204:        state->numBuys++;
        -: 1205:
    #####: 1206:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1207:        {
        -: 1208:            //gain coins equal to trashed card
    #####: 1209:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1210:            //trash card
    #####: 1211:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1212:        }
        -: 1213:
        -: 1214:        //discard card
    #####: 1215:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1216:        return 0;
        -: 1217:
        -: 1218:    case sea_hag:
    #####: 1219:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1221:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1222:                state->deckCount[i]--;
    #####: 1223:                state->discardCount[i]++;
    #####: 1224:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1225:            }
    #####: 1226:        }
    #####: 1227:        return 0;
        -: 1228:
        -: 1229:    case treasure_map:
        -: 1230:        //search hand for another treasure_map
    #####: 1231:        index = -1;
    #####: 1232:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:        {
    #####: 1234:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1235:            {
    #####: 1236:                index = i;
    #####: 1237:                break;
        -: 1238:            }
    #####: 1239:        }
    #####: 1240:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1241:        {
        -: 1242:            //trash both treasure cards
    #####: 1243:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1244:            discardCard(index, currentPlayer, state, 1);
        -: 1245:
        -: 1246:            //gain 4 Gold cards
    #####: 1247:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1248:            {
    #####: 1249:                gainCard(gold, state, 1, currentPlayer);
    #####: 1250:            }
        -: 1251:
        -: 1252:            //return success
    #####: 1253:            return 1;
        -: 1254:        }
        -: 1255:
        -: 1256:        //no second treasure_map found in hand
    #####: 1257:        return -1;
        -: 1258:    }
        -: 1259:
    #####: 1260:    return -1;
      104: 1261:}
        -: 1262:
        -: 1263:
        -: 1264:
function discardCard called 15 returned 100% blocks executed 80%
       15: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:    //if card is not trashed, added to Played pile
       15: 1269:    if (trashFlag < 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1270:    {
        -: 1271:        //add card to played pile
        5: 1272:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1273:        state->playedCardCount++;
        5: 1274:    }
        -: 1275:
        -: 1276:    //set played card to -1
       15: 1277:    state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:    //remove card from player's hand
       15: 1280:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1281:    {
        -: 1282:        //reduce number of cards in hand
    #####: 1283:        state->handCount[currentPlayer]--;
    #####: 1284:    }
       15: 1285:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1286:    {
        -: 1287:        //reduce number of cards in hand
    #####: 1288:        state->handCount[currentPlayer]--;
    #####: 1289:    }
        -: 1290:    else
        -: 1291:    {
        -: 1292:        //replace discarded card with last card in hand
       15: 1293:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:        //set last card to -1
       15: 1295:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:        //reduce number of cards in hand
       15: 1297:        state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:
       15: 1300:    return 0;
        -: 1301:}
        -: 1302:
function gainCard called 10 returned 100% blocks executed 81%
       10: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:    //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:    //check if supply pile is empty (0) or card is not used in game (-1)
       10: 1308:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1309:    {
    #####: 1310:        return -1;
        -: 1311:    }
        -: 1312:
        -: 1313:    //added card for [whoseTurn] current player:
        -: 1314:    // toFlag = 0 : add to discard
        -: 1315:    // toFlag = 1 : add to deck
        -: 1316:    // toFlag = 2 : add to hand
        -: 1317:
       10: 1318:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1319:    {
    #####: 1320:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:        state->deckCount[player]++;
    #####: 1322:    }
       10: 1323:    else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1324:    {
        5: 1325:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1326:        state->handCount[player]++;
        5: 1327:    }
        -: 1328:    else
        -: 1329:    {
        5: 1330:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1331:        state->discardCount[player]++;
        -: 1332:    }
        -: 1333:
        -: 1334:    //decrease number in supply pile
       10: 1335:    state->supplyCount[supplyPos]--;
        -: 1336:
       10: 1337:    return 0;
       10: 1338:}
        -: 1339:
function updateCoins called 37 returned 100% blocks executed 85%
       37: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:    int i;
        -: 1343:
        -: 1344:    //reset coin count
       37: 1345:    state->coins = 0;
        -: 1346:
        -: 1347:    //add coins for each Treasure card in player's hand
      217: 1348:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1349:    {
      180: 1350:        if (state->hand[player][i] == copper)
branch  0 taken 71%
branch  1 taken 29%
        -: 1351:        {
      128: 1352:            state->coins += 1;
      128: 1353:        }
       52: 1354:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1355:        {
    #####: 1356:            state->coins += 2;
    #####: 1357:        }
       52: 1358:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1359:        {
    #####: 1360:            state->coins += 3;
    #####: 1361:        }
      180: 1362:    }
        -: 1363:
        -: 1364:    //add bonus
       37: 1365:    state->coins += bonus;
        -: 1366:
       37: 1367:    return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
