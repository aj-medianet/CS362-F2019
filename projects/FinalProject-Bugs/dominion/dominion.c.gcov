        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9786 returned 100% blocks executed 85%
     9786:    8:int compare(const void* a, const void* b) {
     9786:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
     9786:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     3495:   12:        return -1;
     6291:   13:    return 0;
     9786:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 24 returned 100% blocks executed 94%
       24:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       24:   44:    SelectStream(1);
       24:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       24:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       24:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      264:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     2640:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2400:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     2400:   65:        }
      240:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       24:   73:    if (numPlayers == 2)
branch  0 taken 58%
branch  1 taken 42%
        -:   74:    {
       14:   75:        state->supplyCount[curse] = 10;
       14:   76:    }
       10:   77:    else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
       10:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       24:   87:    if (numPlayers == 2)
branch  0 taken 58%
branch  1 taken 42%
        -:   88:    {
       14:   89:        state->supplyCount[estate] = 8;
       14:   90:        state->supplyCount[duchy] = 8;
       14:   91:        state->supplyCount[province] = 8;
       14:   92:    }
        -:   93:    else
        -:   94:    {
       10:   95:        state->supplyCount[estate] = 12;
       10:   96:        state->supplyCount[duchy] = 12;
       10:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       24:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  102:    state->supplyCount[silver] = 40;
       24:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      504:  106:    for (i = adventurer; i <= treasure_map; i++)           //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     4161:  108:        for (j = 0; j < 10; j++)                   //loop chosen cards
branch  0 taken 93%
branch  1 taken 7%
        -:  109:        {
     3888:  110:            if (kingdomCards[j] == i)
branch  0 taken 5%
branch  1 taken 95%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      207:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 6%
branch  3 taken 94%
        -:  114:                {
       22:  115:                    if (numPlayers == 2) {
branch  0 taken 73%
branch  1 taken 27%
       16:  116:                        state->supplyCount[i] = 8;
       16:  117:                    }
        -:  118:                    else {
        6:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
       22:  121:                }
        -:  122:                else
        -:  123:                {
      185:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      207:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     3681:  130:                state->supplyCount[i] = -1;
        -:  131:            }
     3681:  132:        }
        -:  133:
      480:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      723:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 97%
branch  1 taken 3%
        -:  141:    {
      699:  142:        state->deckCount[i] = 0;
     2796:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
     2097:  145:            state->deck[i][j] = estate;
     2097:  146:            state->deckCount[i]++;
     2097:  147:        }
     5592:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
     4893:  150:            state->deck[i][j] = copper;
     4893:  151:            state->deckCount[i]++;
     4893:  152:        }
      699:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      723:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 97%
branch  1 taken 3%
        -:  157:    {
      699:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
      699:  162:    }
        -:  163:
        -:  164:    //draw player hands
      723:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 97%
branch  1 taken 3%
        -:  166:    {
        -:  167:        //initialize hand size to zero
      699:  168:        state->handCount[i] = 0;
      699:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //    {
        -:  173:        //      drawCard(i, state);
        -:  174:        //    }
      699:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      672:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
      648:  180:        state->embargoTokens[i] = 0;
      648:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       24:  184:    state->outpostPlayed = 0;
       24:  185:    state->phase = 0;
       24:  186:    state->numActions = 1;
       24:  187:    state->numBuys = 1;
       24:  188:    state->playedCardCount = 0;
       24:  189:    state->whoseTurn = 0;
       24:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      144:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      120:  195:        drawCard(state->whoseTurn, state);
      120:  196:    }
        -:  197:
       24:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       24:  200:    return 0;
       24:  201:}
        -:  202:
function shuffle called 699 returned 100% blocks executed 93%
      699:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
      699:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
      699:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:        return -1;
      699:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     7689:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     6990:  217:        card = floor(Random() * state->deckCount[player]);
     6990:  218:        newDeck[newDeckPos] = state->deck[player][card];
     6990:  219:        newDeckPos++;
    23411:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
    16421:  221:            state->deck[player][i] = state->deck[player][i+1];
    16421:  222:        }
     6990:  223:        state->deckCount[player]--;
        -:  224:    }
     7689:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     6990:  226:        state->deck[player][i] = newDeck[i];
     6990:  227:        state->deckCount[player]++;
     6990:  228:    }
        -:  229:
      699:  230:    return 0;
      699:  231:}
        -:  232:
function playCard called 2 returned 100% blocks executed 66%
        2:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
        2:  236:    int coin_bonus = 0;         //tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
        2:  239:    if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
        2:  245:    if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
        2:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
        2:  254:    if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
        2:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
        2:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
        2:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
        2:  271:    return 0;
        2:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 6 returned 100% blocks executed 100%
        6:  313:int numHandCards(struct gameState *state) {
        6:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 2 returned 100% blocks executed 100%
        2:  317:int handCard(int handPos, struct gameState *state) {
        2:  318:    int currentPlayer = whoseTurn(state);
        2:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 208 returned 100% blocks executed 100%
      208:  322:int supplyCount(int card, struct gameState *state) {
      208:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 687 returned 100% blocks executed 100%
      687:  348:int whoseTurn(struct gameState *state) {
      687:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 4 returned 100% blocks executed 70%
        4:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
        4:  422:    int score = 0;
        -:  423:    //score from hand
       24:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  425:    {
       20:  426:        if (state->hand[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  427:            score = score - 1;
    #####:  428:        };
       20:  429:        if (state->hand[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       20:  430:            score = score + 1;
       20:  431:        };
       20:  432:        if (state->hand[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  433:            score = score + 3;
    #####:  434:        };
       20:  435:        if (state->hand[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  436:            score = score + 6;
    #####:  437:        };
       20:  438:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  439:            score = score + 1;
    #####:  440:        };
       20:  441:        if (state->hand[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
       20:  444:    }
        -:  445:
        -:  446:    //score from discard
       24:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  448:    {
       20:  449:        if (state->discard[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  450:            score = score - 1;
    #####:  451:        };
       20:  452:        if (state->discard[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       20:  453:            score = score + 1;
       20:  454:        };
       20:  455:        if (state->discard[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  456:            score = score + 3;
    #####:  457:        };
       20:  458:        if (state->discard[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  459:            score = score + 6;
    #####:  460:        };
       20:  461:        if (state->discard[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  462:            score = score + 1;
    #####:  463:        };
       20:  464:        if (state->discard[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
       20:  467:    }
        -:  468:
        -:  469:    //score from deck
       24:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  471:    {
       20:  472:        if (state->deck[player][i] == curse) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  473:            score = score - 1;
    #####:  474:        };
       20:  475:        if (state->deck[player][i] == estate) {
branch  0 taken 100%
branch  1 taken 0%
       20:  476:            score = score + 1;
       20:  477:        };
       20:  478:        if (state->deck[player][i] == duchy) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  479:            score = score + 3;
    #####:  480:        };
       20:  481:        if (state->deck[player][i] == province) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  482:            score = score + 6;
    #####:  483:        };
       20:  484:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  485:            score = score + 1;
    #####:  486:        };
       20:  487:        if (state->deck[player][i] == gardens) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
       20:  490:    }
        -:  491:
        4:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 136 returned 100% blocks executed 41%
      136:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
      136:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
    #####:  603:    }
        -:  604:
        -:  605:    else {
      136:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
      136:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
      136:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      136:  614:        state->deckCount[player]--;
      136:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
      136:  618:    return 0;
      136:  619:}
        -:  620:
function getCost called 204 returned 100% blocks executed 16%
      204:  621:int getCost(int cardNumber)
        -:  622:{
      204:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 98%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 2%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
    #####:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
      200:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
        4:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
      204:  682:}
        -:  683:
function cardEffect called 677 returned 100% blocks executed 27%
      677:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
      677:  691:    int currentPlayer = whoseTurn(state);
      677:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
      677:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
      677:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
      677:  698:    int z = 0;// this is the counter for the temp hand
      677:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  700:        nextPlayer = 0;
    #####:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
      677:  705:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 1%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 1%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 98%
branch 13 taken 1%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  706:    {
        -:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
    #####:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
        -:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
    #####:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
    #####:  744:            }
    #####:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
        -:  749:
    #####:  750:        return 0;
        -:  751:
        -:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
       56:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 86%
branch  1 taken 14%
       48:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
       48:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
       48:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
        8:  762:        updateCoins(currentPlayer, state, 5);
        8:  763:        x = 1;//Condition to loop on
        -:  764:
        -:  765:        // used for testing infinite loop
        8:  766:        int count = 0;
        -:  767:
      208:  768:        while( x == 1) {//Buy one card
branch  0 taken 98%
branch  1 taken 2%
      204:  769:            if (supplyCount(choice1, state) <= 0) {
branch  0 taken 0%
branch  1 taken 100%
        -:  770:                if (DEBUG)
        -:  771:                    printf("None of that card left, sorry!\n");
        -:  772:
        -:  773:                if (DEBUG) {
        -:  774:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  775:                }
    #####:  776:            }
      204:  777:            else if (state->coins < getCost(choice1)) {
branch  0 taken 98%
branch  1 taken 2%
      200:  778:                printf("That card is too expensive!\n");
        -:  779:
        -:  780:                if (DEBUG) {
        -:  781:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  782:                }
      200:  783:            }
        -:  784:            else {
        -:  785:
        -:  786:                if (DEBUG) {
        -:  787:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  788:                }
        -:  789:
        4:  790:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
        4:  791:                x = 0;//No more buying cards
        -:  792:
        -:  793:                if (DEBUG) {
        -:  794:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  795:                }
        -:  796:
        -:  797:            }
        -:  798:
        -:  799:            // used to break out of infinite loop
      204:  800:            count++;
      204:  801:            if (count == 50) {
branch  0 taken 2%
branch  1 taken 98%
        4:  802:                return 1; // return an error
        -:  803:            }
        -:  804:        }
        -:  805:
        -:  806:        //Reset Hand
       28:  807:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 86%
branch  1 taken 14%
       24:  808:            state->hand[currentPlayer][i] = temphand[i];
       24:  809:            temphand[i] = -1;
       24:  810:        }
        -:  811:        //Reset Hand
        -:  812:
        4:  813:        return 0;
        -:  814:
        -:  815:    case gardens:
    #####:  816:        return -1;
        -:  817:
        -:  818:    case mine:
    #####:  819:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  820:
    #####:  821:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  822:        {
    #####:  823:            return -1;
        -:  824:        }
        -:  825:
    #####:  826:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  827:        {
    #####:  828:            return -1;
        -:  829:        }
        -:  830:
    #####:  831:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  832:        {
    #####:  833:            return -1;
        -:  834:        }
        -:  835:
    #####:  836:        gainCard(choice2, state, 2, currentPlayer);
        -:  837:
        -:  838:        //discard card from hand
    #####:  839:        discardCard(handPos, currentPlayer, state, 0);
        -:  840:
        -:  841:        //discard trashed card
    #####:  842:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  843:        {
    #####:  844:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  845:            {
    #####:  846:                discardCard(i, currentPlayer, state, 0);
    #####:  847:                break;
        -:  848:            }
    #####:  849:        }
        -:  850:
    #####:  851:        return 0;
        -:  852:
        -:  853:    case remodel:
    #####:  854:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  857:        {
    #####:  858:            return -1;
        -:  859:        }
        -:  860:
    #####:  861:        gainCard(choice2, state, 0, currentPlayer);
        -:  862:
        -:  863:        //discard card from hand
    #####:  864:        discardCard(handPos, currentPlayer, state, 0);
        -:  865:
        -:  866:        //discard trashed card
    #####:  867:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:        {
    #####:  869:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  870:            {
    #####:  871:                discardCard(i, currentPlayer, state, 0);
    #####:  872:                break;
        -:  873:            }
    #####:  874:        }
        -:  875:
        -:  876:
    #####:  877:        return 0;
        -:  878:
        -:  879:    case smithy:
        -:  880:        //+3 Cards
    #####:  881:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  882:        {
    #####:  883:            drawCard(currentPlayer, state);
    #####:  884:        }
        -:  885:
        -:  886:        //discard card from hand
    #####:  887:        discardCard(handPos, currentPlayer, state, 0);
    #####:  888:        return 0;
        -:  889:
        -:  890:    case village:
        -:  891:        //+1 Card
    #####:  892:        drawCard(currentPlayer, state);
        -:  893:
        -:  894:        //+2 Actions
    #####:  895:        state->numActions = state->numActions + 2;
        -:  896:
        -:  897:        //discard played card from hand
    #####:  898:        discardCard(handPos, currentPlayer, state, 0);
    #####:  899:        return 0;
        -:  900:
        -:  901:    case baron:
        4:  902:        state->numBuys++;//Increase buys by 1!
        4:  903:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 100%
branch  1 taken 0%
        4:  904:            int p = 0;//Iterator for hand!
        4:  905:            int card_not_discarded = 1;//Flag for discard set!
       12:  906:            while(card_not_discarded) {
branch  0 taken 67%
branch  1 taken 33%
        8:  907:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 50%
branch  1 taken 50%
        4:  908:                    state->coins += 4;//Add 4 coins to the amount of coins
        4:  909:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        4:  910:                    state->discardCount[currentPlayer]++;
       18:  911:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 78%
branch  1 taken 22%
       14:  912:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
       14:  913:                    }
        4:  914:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        4:  915:                    state->handCount[currentPlayer]--;
        4:  916:                    card_not_discarded = 0;//Exit the loop
        4:  917:                }
        4:  918:                else if (p > state->handCount[currentPlayer]) {
branch  0 taken 0%
branch  1 taken 100%
        -:  919:                    if(DEBUG) {
        -:  920:                        printf("No estate cards in your hand, invalid choice\n");
        -:  921:                        printf("Must gain an estate if there are any\n");
        -:  922:                    }
    #####:  923:                    if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  924:                        gainCard(estate, state, 0, currentPlayer);
        -:  925:
    #####:  926:                        state->supplyCount[estate]--;//Decrement estates
    #####:  927:                        if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:                            isGameOver(state);
    #####:  929:                        }
    #####:  930:                    }
    #####:  931:                    card_not_discarded = 0;//Exit the loop
    #####:  932:                }
        -:  933:
        -:  934:                else {
        4:  935:                    p++;//Next card
        -:  936:                }
        -:  937:            }
        4:  938:        }
        -:  939:
        -:  940:        else {
    #####:  941:            if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  942:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  943:
    #####:  944:                state->supplyCount[estate]--;//Decrement Estates
    #####:  945:                if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  946:                    isGameOver(state);
    #####:  947:                }
    #####:  948:            }
        -:  949:        }
        -:  950:
        -:  951:
        4:  952:        return 0;
        -:  953:
        -:  954:    case great_hall:
        -:  955:        //+1 Card
    #####:  956:        drawCard(currentPlayer, state);
        -:  957:
        -:  958:        //+1 Actions
    #####:  959:        state->numActions++;
        -:  960:
        -:  961:        //discard card from hand
    #####:  962:        discardCard(handPos, currentPlayer, state, 0);
    #####:  963:        return 0;
        -:  964:
        -:  965:    case minion:
        -:  966:        //+1 action
    #####:  967:        state->numActions++;
        -:  968:
        -:  969:        //discard card from hand
    #####:  970:        discardCard(handPos, currentPlayer, state, 0);
        -:  971:
    #####:  972:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  973:        {
    #####:  974:            state->coins = state->coins + 2;
    #####:  975:        }
    #####:  976:        else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  977:        {
        -:  978:            //discard hand
    #####:  979:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  980:            {
    #####:  981:                discardCard(handPos, currentPlayer, state, 0);
        -:  982:            }
        -:  983:
        -:  984:            //draw 4
    #####:  985:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  986:            {
    #####:  987:                drawCard(currentPlayer, state);
    #####:  988:            }
        -:  989:
        -:  990:            //other players discard hand and redraw if hand size > 4
    #####:  991:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  992:            {
    #####:  993:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  994:                {
    #####:  995:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  996:                    {
        -:  997:                        //discard hand
    #####:  998:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  999:                        {
    #####: 1000:                            discardCard(handPos, i, state, 0);
        -: 1001:                        }
        -: 1002:
        -: 1003:                        //draw 4
    #####: 1004:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1005:                        {
    #####: 1006:                            drawCard(i, state);
    #####: 1007:                        }
    #####: 1008:                    }
    #####: 1009:                }
    #####: 1010:            }
        -: 1011:
    #####: 1012:        }
    #####: 1013:        return 0;
        -: 1014:
        -: 1015:    case steward:
    #####: 1016:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1017:        {
        -: 1018:            //+2 cards
    #####: 1019:            drawCard(currentPlayer, state);
    #####: 1020:            drawCard(currentPlayer, state);
    #####: 1021:        }
    #####: 1022:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1023:        {
        -: 1024:            //+2 coins
    #####: 1025:            state->coins = state->coins + 2;
    #####: 1026:        }
        -: 1027:        else
        -: 1028:        {
        -: 1029:            //trash 2 cards in hand
    #####: 1030:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1031:            discardCard(choice3, currentPlayer, state, 1);
        -: 1032:        }
        -: 1033:
        -: 1034:        //discard card from hand
    #####: 1035:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1036:        return 0;
        -: 1037:
        -: 1038:    case tribute:
      663: 1039:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1040:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1041:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:                state->deckCount[nextPlayer]--;
    #####: 1043:            }
    #####: 1044:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1045:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1046:                state->discardCount[nextPlayer]--;
    #####: 1047:            }
        -: 1048:            else {
        -: 1049:                //No Card to Reveal
        -: 1050:                if (DEBUG) {
        -: 1051:                    printf("No cards to reveal\n");
        -: 1052:                }
        -: 1053:            }
    #####: 1054:        }
        -: 1055:
        -: 1056:        else {
      663: 1057:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1058:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1059:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1060:                    state->deckCount[nextPlayer]++;
    #####: 1061:                    state->discard[nextPlayer][i] = -1;
    #####: 1062:                    state->discardCount[nextPlayer]--;
    #####: 1063:                }
        -: 1064:
    #####: 1065:                shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1066:            }
      663: 1067:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      663: 1068:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      663: 1069:            state->deckCount[nextPlayer]--;
      663: 1070:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      663: 1071:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      663: 1072:            state->deckCount[nextPlayer]--;
        -: 1073:        }
        -: 1074:
      663: 1075:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 98%
branch  1 taken 2%
      652: 1076:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      652: 1077:            state->playedCardCount++;
      652: 1078:            tributeRevealedCards[1] = -1;
      652: 1079:        }
        -: 1080:
     2652: 1081:        for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25%
     1989: 1082:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       13: 1083:                state->coins += 2;
       13: 1084:            }
        -: 1085:
     1976: 1086:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
        8: 1087:                drawCard(currentPlayer, state);
        8: 1088:                drawCard(currentPlayer, state);
        8: 1089:            }
        -: 1090:            else { //Action Card
     1968: 1091:                state->numActions = state->numActions + 2;
        -: 1092:            }
     1989: 1093:        }
        -: 1094:
      663: 1095:        return 0;
        -: 1096:
        -: 1097:    case ambassador:
        2: 1098:        j = 0;        //used to check if player has enough cards to discard
        -: 1099:
        2: 1100:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1101:        {
    #####: 1102:            return -1;
        -: 1103:        }
        -: 1104:
        2: 1105:        if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1106:        {
    #####: 1107:            return -1;
        -: 1108:        }
        -: 1109:
       12: 1110:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1111:        {
       10: 1112:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -: 1113:            {
    #####: 1114:                j++;
    #####: 1115:            }
       10: 1116:        }
        2: 1117:        if (j < choice2)
branch  0 taken 100%
branch  1 taken 0%
        -: 1118:        {
        2: 1119:            return -1;
        -: 1120:        }
        -: 1121:
        -: 1122:        if (DEBUG)
        -: 1123:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1124:
        -: 1125:        //increase supply count for choosen card by amount being discarded
    #####: 1126:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1127:
        -: 1128:        //each other player gains a copy of revealed card
    #####: 1129:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:        {
    #####: 1131:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:            {
    #####: 1133:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1134:            }
    #####: 1135:        }
        -: 1136:
        -: 1137:        //discard played card from hand
    #####: 1138:        discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
        -: 1140:        //trash copies of cards returned to supply
    #####: 1141:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1142:        {
    #####: 1143:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:            {
    #####: 1145:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1146:                {
    #####: 1147:                    discardCard(i, currentPlayer, state, 1);
    #####: 1148:                    break;
        -: 1149:                }
    #####: 1150:            }
    #####: 1151:        }
        -: 1152:
    #####: 1153:        return 0;
        -: 1154:
        -: 1155:    case cutpurse:
        -: 1156:
    #####: 1157:        updateCoins(currentPlayer, state, 2);
    #####: 1158:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:        {
    #####: 1160:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1161:            {
    #####: 1162:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1163:                {
    #####: 1164:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1165:                    {
    #####: 1166:                        discardCard(j, i, state, 0);
    #####: 1167:                        break;
        -: 1168:                    }
    #####: 1169:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1170:                    {
    #####: 1171:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1172:                        {
        -: 1173:                            if (DEBUG)
        -: 1174:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1175:                        }
    #####: 1176:                        break;
        -: 1177:                    }
    #####: 1178:                }
        -: 1179:
    #####: 1180:            }
        -: 1181:
    #####: 1182:        }
        -: 1183:
        -: 1184:        //discard played card from hand
    #####: 1185:        discardCard(handPos, currentPlayer, state, 0);
        -: 1186:
    #####: 1187:        return 0;
        -: 1188:
        -: 1189:
        -: 1190:    case embargo:
        -: 1191:        //+2 Coins
    #####: 1192:        state->coins = state->coins + 2;
        -: 1193:
        -: 1194:        //see if selected pile is in play
    #####: 1195:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1196:        {
    #####: 1197:            return -1;
        -: 1198:        }
        -: 1199:
        -: 1200:        //add embargo token to selected supply pile
    #####: 1201:        state->embargoTokens[choice1]++;
        -: 1202:
        -: 1203:        //trash card
    #####: 1204:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1205:        return 0;
        -: 1206:
        -: 1207:    case outpost:
        -: 1208:        //set outpost flag
    #####: 1209:        state->outpostPlayed++;
        -: 1210:
        -: 1211:        //discard card
    #####: 1212:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:    case salvager:
        -: 1216:        //+1 buy
    #####: 1217:        state->numBuys++;
        -: 1218:
    #####: 1219:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1220:        {
        -: 1221:            //gain coins equal to trashed card
    #####: 1222:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1223:            //trash card
    #####: 1224:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1225:        }
        -: 1226:
        -: 1227:        //discard card
    #####: 1228:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1229:        return 0;
        -: 1230:
        -: 1231:    case sea_hag:
    #####: 1232:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1233:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1234:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1235:                state->deckCount[i]--;
    #####: 1236:                state->discardCount[i]++;
    #####: 1237:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1238:            }
    #####: 1239:        }
    #####: 1240:        return 0;
        -: 1241:
        -: 1242:    case treasure_map:
        -: 1243:        //search hand for another treasure_map
    #####: 1244:        index = -1;
    #####: 1245:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:        {
    #####: 1247:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1248:            {
    #####: 1249:                index = i;
    #####: 1250:                break;
        -: 1251:            }
    #####: 1252:        }
    #####: 1253:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1254:        {
        -: 1255:            //trash both treasure cards
    #####: 1256:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1257:            discardCard(index, currentPlayer, state, 1);
        -: 1258:
        -: 1259:            //gain 4 Gold cards
    #####: 1260:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:            {
    #####: 1262:                gainCard(gold, state, 1, currentPlayer);
    #####: 1263:            }
        -: 1264:
        -: 1265:            //return success
    #####: 1266:            return 1;
        -: 1267:        }
        -: 1268:
        -: 1269:        //no second treasure_map found in hand
    #####: 1270:        return -1;
        -: 1271:    }
        -: 1272:
    #####: 1273:    return -1;
      677: 1274:}
        -: 1275:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1276:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1277:{
        -: 1278:
        -: 1279:    //if card is not trashed, added to Played pile
    #####: 1280:    if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1281:    {
        -: 1282:        //add card to played pile
    #####: 1283:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1284:        state->playedCardCount++;
    #####: 1285:    }
        -: 1286:
        -: 1287:    //set played card to -1
    #####: 1288:    state->hand[currentPlayer][handPos] = -1;
        -: 1289:
        -: 1290:    //remove card from player's hand
    #####: 1291:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1292:    {
        -: 1293:        //reduce number of cards in hand
    #####: 1294:        state->handCount[currentPlayer]--;
    #####: 1295:    }
    #####: 1296:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1297:    {
        -: 1298:        //reduce number of cards in hand
    #####: 1299:        state->handCount[currentPlayer]--;
    #####: 1300:    }
        -: 1301:    else
        -: 1302:    {
        -: 1303:        //replace discarded card with last card in hand
    #####: 1304:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1305:        //set last card to -1
    #####: 1306:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1307:        //reduce number of cards in hand
    #####: 1308:        state->handCount[currentPlayer]--;
        -: 1309:    }
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:}
        -: 1313:
function gainCard called 4 returned 100% blocks executed 72%
        4: 1314:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1315:{
        -: 1316:    //Note: supplyPos is enum of choosen card
        -: 1317:
        -: 1318:    //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1319:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:        return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //added card for [whoseTurn] current player:
        -: 1325:    // toFlag = 0 : add to discard
        -: 1326:    // toFlag = 1 : add to deck
        -: 1327:    // toFlag = 2 : add to hand
        -: 1328:
        4: 1329:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1330:    {
    #####: 1331:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1332:        state->deckCount[player]++;
    #####: 1333:    }
        4: 1334:    else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1335:    {
    #####: 1336:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1337:        state->handCount[player]++;
    #####: 1338:    }
        -: 1339:    else
        -: 1340:    {
        4: 1341:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1342:        state->discardCount[player]++;
        -: 1343:    }
        -: 1344:
        -: 1345:    //decrease number in supply pile
        4: 1346:    state->supplyCount[supplyPos]--;
        -: 1347:
        4: 1348:    return 0;
        4: 1349:}
        -: 1350:
function updateCoins called 34 returned 100% blocks executed 85%
       34: 1351:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1352:{
        -: 1353:    int i;
        -: 1354:
        -: 1355:    //reset coin count
       34: 1356:    state->coins = 0;
        -: 1357:
        -: 1358:    //add coins for each Treasure card in player's hand
      202: 1359:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1360:    {
      168: 1361:        if (state->hand[player][i] == copper)
branch  0 taken 57%
branch  1 taken 43%
        -: 1362:        {
       96: 1363:            state->coins += 1;
       96: 1364:        }
       72: 1365:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1366:        {
    #####: 1367:            state->coins += 2;
    #####: 1368:        }
       72: 1369:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1370:        {
    #####: 1371:            state->coins += 3;
    #####: 1372:        }
      168: 1373:    }
        -: 1374:
        -: 1375:    //add bonus
       34: 1376:    state->coins += bonus;
        -: 1377:
       34: 1378:    return 0;
        -: 1379:}
        -: 1380:
        -: 1381:
        -: 1382://end of dominion.c
        -: 1383:
