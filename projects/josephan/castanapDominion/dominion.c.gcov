        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 113296974 returned 100% blocks executed 85%
113296974:    8:int compare(const void* a, const void* b) {
113296974:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
113296974:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
 40463205:   12:        return -1;
 72833769:   13:    return 0;
113296974:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 16143 returned 100% blocks executed 94%
    16143:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
    16143:   44:    SelectStream(1);
    16143:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
    16143:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
    16143:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
   177573:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
  1775730:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
  1614300:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
  1614300:   65:        }
   161430:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
    16143:   73:    if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   74:    {
      133:   75:        state->supplyCount[curse] = 10;
      133:   76:    }
    16010:   77:    else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    16010:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
    16143:   87:    if (numPlayers == 2)
branch  0 taken 1%
branch  1 taken 99%
        -:   88:    {
      133:   89:        state->supplyCount[estate] = 8;
      133:   90:        state->supplyCount[duchy] = 8;
      133:   91:        state->supplyCount[province] = 8;
      133:   92:    }
        -:   93:    else
        -:   94:    {
    16010:   95:        state->supplyCount[estate] = 12;
    16010:   96:        state->supplyCount[duchy] = 12;
    16010:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
    16143:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    16143:  102:    state->supplyCount[silver] = 40;
    16143:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
   339003:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
  2774872:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
  2601289:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
   149277:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 89%
branch  1 taken 11%
branch  2 taken 12%
branch  3 taken 88%
        -:  114:                {
    32270:  115:                    if (numPlayers == 2) {
branch  0 taken 1%
branch  1 taken 99%
      266:  116:                        state->supplyCount[i] = 8;
      266:  117:                    }
        -:  118:                    else {
    32004:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
    32270:  121:                }
        -:  122:                else
        -:  123:                {
   117007:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
   149277:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
  2452012:  130:                state->supplyCount[i] = -1;
        -:  131:            }
  2452012:  132:        }
        -:  133:
   322860:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
  8108784:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  141:    {
  8092641:  142:        state->deckCount[i] = 0;
 32370564:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
 24277923:  145:            state->deck[i][j] = estate;
 24277923:  146:            state->deckCount[i]++;
 24277923:  147:        }
 64741128:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
 56648487:  150:            state->deck[i][j] = copper;
 56648487:  151:            state->deckCount[i]++;
 56648487:  152:        }
  8092641:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
  8108784:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  157:    {
  8092641:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
  8092641:  162:    }
        -:  163:
        -:  164:    //draw player hands
  8108784:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  166:    {
        -:  167:        //initialize hand size to zero
  8092641:  168:        state->handCount[i] = 0;
  8092641:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
  8092641:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
   452004:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
   435861:  180:        state->embargoTokens[i] = 0;
   435861:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
    16143:  184:    state->outpostPlayed = 0;
    16143:  185:    state->phase = 0;
    16143:  186:    state->numActions = 1;
    16143:  187:    state->numBuys = 1;
    16143:  188:    state->playedCardCount = 0;
    16143:  189:    state->whoseTurn = 0;
    16143:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
    96858:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
    80715:  195:        drawCard(state->whoseTurn, state);
    80715:  196:    }
        -:  197:
    16143:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
    16143:  200:    return 0;
    16143:  201:}
        -:  202:
function shuffle called 8092641 returned 100% blocks executed 93%
  8092641:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
  8092641:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
  8092641:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:        return -1;
  8092641:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
 89019051:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
 80926410:  217:        card = floor(Random() * state->deckCount[player]);
 80926410:  218:        newDeck[newDeckPos] = state->deck[player][card];
 80926410:  219:        newDeckPos++;
262259348:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31%
181332938:  221:            state->deck[player][i] = state->deck[player][i+1];
181332938:  222:        }
 80926410:  223:        state->deckCount[player]--;
        -:  224:    }
 89019051:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
 80926410:  226:        state->deck[player][i] = newDeck[i];
 80926410:  227:        state->deckCount[player]++;
 80926410:  228:    }
        -:  229:
  8092641:  230:    return 0;
  8092641:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 2009 returned 100% blocks executed 100%
     2009:  313:int numHandCards(struct gameState *state) {
     2009:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 13338 returned 100% blocks executed 100%
    13338:  322:int supplyCount(int card, struct gameState *state) {
    13338:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 20800 returned 100% blocks executed 100%
    20800:  348:int whoseTurn(struct gameState *state) {
    20800:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
    #####:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
    #####:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
    #####:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
    #####:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
    #####:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
    #####:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
    #####:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
    #####:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
    #####:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
    #####:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
    #####:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
    #####:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
    #####:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
    #####:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
    #####:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
    #####:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
    #####:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 88795 returned 100% blocks executed 41%
    88795:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
    88795:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
    #####:  603:    }
        -:  604:
        -:  605:    else {
    88795:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
    88795:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
    88795:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    88795:  614:        state->deckCount[player]--;
    88795:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
    88795:  618:    return 0;
    88795:  619:}
        -:  620:
function getCost called 10 returned 100% blocks executed 16%
       10:  621:int getCost(int cardNumber)
        -:  622:{
       10:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 50%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        5:  634:        return 0;
        -:  635:    case silver:
        5:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
       10:  682:}
        -:  683:
        -:  684:	/*****************************************************************************
        -:  685:	** Function that implements ambassador card effect.
        -:  686:	*****************************************************************************/
function ambassadorCard called 42 returned 100% blocks executed 85%
       42:  687:    	int ambassadorCard(int choice1, int choice2, struct gameState *state, int handPos)
        -:  688:	{
        -:  689:       		int i;
        -:  690:		int j;
       42:  691:    		int currentPlayer = whoseTurn(state);
        -:  692:
       42:  693:		j = 1;		// Bug # 1, used to check if player has enough cards to discard
        -:  694:
        -:  695:		// If choice1 is the card being currently played, then invalid choice1.
       42:  696:		if (choice1 == handPos)
branch  0 taken 17%
branch  1 taken 83%
        -:  697:		{
        7:  698:		    return -1;
        -:  699:		}
        -:  700:	
        -:  701:		// If choice2 is not between 1-2, then invalid choice2.
       35:  702:		if (choice2 > 2 || choice2 < 0)
branch  0 taken 60%
branch  1 taken 40%
branch  2 taken 33%
branch  3 taken 67%
        -:  703:		{
       21:  704:		    return -1;
        -:  705:		}
        -:  706:
        -:  707:		// Counts how many instances of the choice1 card that the player has in their hand.
       49:  708:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  709:		{
       35:  710:		    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  711:		    {
    #####:  712:			j++;
    #####:  713:		    }
       35:  714:		}
        -:  715:
        -:  716:		// If the player has less instances of the choice1 card than the number for choice2,
        -:  717:		// then invalid choice2.
       14:  718:		if (j < choice2)
branch  0 taken 0%
branch  1 taken 100%
        -:  719:		{
    #####:  720:		    return -1;
        -:  721:		}
        -:  722:
        -:  723:		// Prints who is the player and what card they had revealed.
        -:  724:		if (DEBUG)
        -:  725:		    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  726:
        -:  727:		// Increase supply count for choosen card by amount being discarded
       14:  728:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  729:
        -:  730:		// Each other player gains a copy of revealed card
       42:  731:		for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  732:		{
       28:  733:		    if (i == currentPlayer)	// Bug # 2
branch  0 taken 50%
branch  1 taken 50%
        -:  734:		    {
       14:  735:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
       14:  736:		    }
       28:  737:		}
        -:  738:
        -:  739:		// Discard played card from hand
       14:  740:		discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:		// Trash copies of cards returned to supply
       21:  743:		for (j = 0; j < choice2; j++)
branch  0 taken 33%
branch  1 taken 67%
        -:  744:		{
        7:  745:		    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  746:		    {
        7:  747:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 100%
branch  1 taken 0%
        -:  748:			{
        7:  749:			    discardCard(i, currentPlayer, state, 1);
        7:  750:			    break;
        -:  751:			}
    #####:  752:		    }
        7:  753:		}
        -:  754:
        -:  755:		// Function successful.
       14:  756:        	return 0;
       42:  757:	}
        -:  758:
        -:  759:	/*****************************************************************************
        -:  760:	** Function that implements baron card effect.
        -:  761:	*****************************************************************************/
function baronCard called 10060 returned 100% blocks executed 92%
    10060:  762:	int baronCard(int choice1, struct gameState *state)
        -:  763:	{
    10060:  764:    		int currentPlayer = whoseTurn(state);
        -:  765:		
    10060:  766:		state->numBuys++;//Increase buys by 1!
        -:  767:		
        -:  768:		// If user chooses to discard an estate
    10060:  769:		if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 60%
branch  1 taken 40%
        -:  770:		    
     6036:  771:			int p = 0;//Iterator for hand!
     6036:  772:		    	int card_not_discarded = 1;//Flag for discard set!
        -:  773:	
        -:  774:			// Find estate card in hand before discarding.	
    19308:  775:			while(card_not_discarded) {
branch  0 taken 69%
branch  1 taken 31%
        -:  776:			
        -:  777:				// If estate card found	
    13272:  778:				if (state->hand[currentPlayer][p] == estate) {	// Bug 1 fixed! changed = to ==
branch  0 taken 41%
branch  1 taken 59%
        -:  779:				
     5501:  780:					state->coins += 4;//Add 4 coins to the amount of coins
        -:  781:				
        -:  782:					// Add estate to discard and increment discardCount for currentPlayer.
     5501:  783:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     5501:  784:					state->discardCount[currentPlayer]++;
        -:  785:				   	
        -:  786:					// Get next card and each proceeding card to fill in gap of discarded card.
    28968:  787:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 81%
branch  1 taken 19%
    23467:  788:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1]; // Bug #2 fixed. p -> p+1
    23467:  789:				    	}
        -:  790:				    	
        -:  791:					// Mark last spot in hand as -1; As there is one less card. And then decrement handCount.
     5501:  792:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     5501:  793:				   	state->handCount[currentPlayer]--;
        -:  794:
        -:  795:					// Flag that card is now discarded
     5501:  796:				    	card_not_discarded = 0;//Exit the loop
     5501:  797:				}
        -:  798:			
        -:  799:				// Estate card not found in the whole hand.
     7771:  800:				else if (p > state->handCount[currentPlayer]) {
branch  0 taken 7%
branch  1 taken 93%
        -:  801:				  
        -:  802:					// Print no estate status.
        -:  803:					if(DEBUG) {
        -:  804:						printf("No estate cards in your hand, invalid choice\n");
        -:  805:						printf("Must gain an estate if there are any\n");
        -:  806:				   	}
        -:  807:				
        -:  808:					// If the supply has estate cards, then give an estate card to the player.
      535:  809:					if (supplyCount(estate, state) > 0) {
branch  0 taken 67%
branch  1 taken 33%
      356:  810:						gainCard(estate, state, 0, currentPlayer);
        -:  811:
        -:  812:						// Decrement estate card from supplyCount
      356:  813:						state->supplyCount[estate]--;
        -:  814:
        -:  815:						// If there are no more estate cards due to this action, then isGameOver() is updated.
      356:  816:						if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  817:					    		isGameOver(state);
    #####:  818:						}
      356:  819:				    	}
        -:  820:					
        -:  821:					// Flag changed to exit loop
      535:  822:				   	card_not_discarded = 0;
      535:  823:				}
        -:  824:
        -:  825:				// If estate card not found and not yet through the whole hand.
        -:  826:				else {
     7236:  827:				    	p++;	// Go to next card by incrementing p.
        -:  828:				}
        -:  829:		    	}
     6036:  830:		}
        -:  831:	
        -:  832:		// Else if the user chooses not to discard an estate.
        -:  833:		else {
        -:  834:			// If the supply has estate cards, then give an estate card to the player
     4024:  835:		    	if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
     4024:  836:				gainCard(estate, state, 0, currentPlayer);
        -:  837:
        -:  838:				// Decrement estate card from supplyCount
     4024:  839:				state->supplyCount[estate]--;
        -:  840:		
        -:  841:				// If there are no more estate cards due to this action, then isGameOver() is updated.
     4024:  842:				if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  843:			    		isGameOver(state);
    #####:  844:				}
     4024:  845:		    	}
        -:  846:		}
        -:  847:
        -:  848:		// Function successful.
    10060:  849:        	return 0;
        -:  850:	}
        -:  851:
        -:  852:	/*****************************************************************************
        -:  853:	** Function that implements mine card effect.
        -:  854:	*****************************************************************************/
function mineCard called 15 returned 100% blocks executed 82%
       15:  855:	int mineCard(int choice1, int choice2, struct gameState *state, int handPos)
        -:  856:	{
        -:  857:		int i;
        -:  858:		int j;
       15:  859:    		int currentPlayer = whoseTurn(state);
        -:  860:		
        -:  861:		// Store card we will trash 
       15:  862:		j = state->hand[currentPlayer][choice2]; // Bug #1, choice2 instead of choice1
        -:  863:
        -:  864:		// If player chose to trash something other than a Treasure.
       15:  865:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 50%
branch  3 taken 50%
        -:  866:		{
       10:  867:		    return -1;
        -:  868:		}
        -:  869:
        -:  870:		// If the card the player chose to gain does not exist.
        5:  871:		if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  872:		{
    #####:  873:		    return -1;
        -:  874:		}
        -:  875:
        -:  876:		// If the Treasure card the player chose to gain is more than +3 of the trashed card's cost.
        5:  877:		if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) ) // Bug #2
branch  0 taken 0%
branch  1 taken 100%
        -:  878:											// < instead of > 
        -:  879:		{
    #####:  880:		    return -1;
        -:  881:		}
        -:  882:
        -:  883:		// Otherwise, gain the chosen Treasure.
        5:  884:		gainCard(choice2, state, 2, currentPlayer);
        -:  885:
        -:  886:		// Discard mine card from hand
        5:  887:		discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:		// Discard Treasure card to trash.
       30:  890:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  891:		{
       25:  892:		    if (state->hand[currentPlayer][i] == j)
branch  0 taken 0%
branch  1 taken 100%
        -:  893:		    {
    #####:  894:			discardCard(i, currentPlayer, state, 0);
    #####:  895:			break;
        -:  896:		    }
       25:  897:		}
        -:  898:
        -:  899:		// Function successful.
        5:  900:		return 0;
       15:  901:	}
        -:  902:
        -:  903:	
        -:  904:	/*****************************************************************************
        -:  905:	** Function that implements minion card effect.
        -:  906:	*****************************************************************************/
function minionCard called 8036 returned 100% blocks executed 71%
     8036:  907:	int minionCard(int choice1, int choice2, struct gameState *state, int handPos)
        -:  908:	{
        -:  909:	    	int i;
        -:  910:		int j;
     8036:  911:		int currentPlayer = whoseTurn(state);
        -:  912:
        -:  913:		// +1 action
     8036:  914:		state->numActions++;
        -:  915:
        -:  916:		// Discard card from hand.
     8036:  917:		discardCard(handPos, currentPlayer, state, 0);
        -:  918:
        -:  919:		// If player chooses to gain two coins.
     8036:  920:		if (choice1)
branch  0 taken 50%
branch  1 taken 50%
        -:  921:		{
     4018:  922:		    state->coins = state->coins + 2;
     4018:  923:		}
        -:  924:
        -:  925:		// Else if player chooses other choice.
     4018:  926:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 50%
branch  1 taken 50%
        -:  927:		{
        -:  928:		    // Discard whole hand.
     2009:  929:		    if(numHandCards(state) > 0)	// Bug # 1, using if instead of while
branch  0 taken 100%
branch  1 taken 0%
        -:  930:		    {
     2009:  931:			discardCard(handPos, currentPlayer, state, 0);
     2009:  932:		    }
        -:  933:
        -:  934:		    // Draw 4 cards.
    10045:  935:		    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  936:		    {
     8036:  937:			drawCard(currentPlayer, state);
     8036:  938:		    }
        -:  939:
        -:  940:		    // Other players discard hand and redraw if hand size > 4
   986270:  941:		    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  942:		    {
   984261:  943:			if (i != currentPlayer)
branch  0 taken 99%
branch  1 taken 1%
        -:  944:			{
        -:  945:			    // If other player's hand has more than four cards.	
   982252:  946:			    if ( state->handCount[i] > 4 )
branch  0 taken 0%
branch  1 taken 100%
        -:  947:			    {
        -:  948:				// Discard whole hand.
    #####:  949:				while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  950:				{
    #####:  951:				    discardCard(handPos, i, state, 0);
        -:  952:				}
        -:  953:
        -:  954:				// Draw 4 cards.
    #####:  955:				for (i = 0; i < 4; i++) // Bug # 2, using i again instead of j
branch  0 never executed
branch  1 never executed
        -:  956:				{
    #####:  957:				    drawCard(i, state);
    #####:  958:				}
    #####:  959:			    }
   982252:  960:			}
   984261:  961:		    }
        -:  962:
     2009:  963:		}
        -:  964:		
        -:  965:		// Function succesful.
     8036:  966:		return 0;
        -:  967:	}
        -:  968:
        -:  969:	/*****************************************************************************
        -:  970:	** Function that implements tribute card effect.
        -:  971:	*****************************************************************************/
function tributeCard called 638 returned 100% blocks executed 97%
      638:  972:	int tributeCard(struct gameState *state)
        -:  973:	{
        -:  974:		int i;
      638:  975:		int currentPlayer = whoseTurn(state);
      638:  976:	    	int nextPlayer = currentPlayer + 1;
      638:  977:	    	int tributeRevealedCards[2] = {-1, -1};
        -:  978:	
        -:  979:		// Checks if next player has combined discard and deck count of 1 or less.
      638:  980:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 7%
branch  1 taken 93%
        -:  981:		   
        -:  982:		    // If there is a card in the deck, then store that card as a tributeRevealedCards. 	
        -:  983:		    // Update player's deckCount.	
       42:  984:		    if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  985:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:			state->deckCount[nextPlayer]--;
    #####:  987:		    }
        -:  988:		
        -:  989:		    // If there is no card in the deck but there is a card in the discard pile,
        -:  990:		    // then add that card to the tributeRevealedCards. Then updated player's discardCount.
       42:  991:		    else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 33%
branch  1 taken 67%
       14:  992:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       14:  993:			state->discardCount[nextPlayer]--;
       14:  994:		    }
        -:  995:		
        -:  996:		    // If there are no cards, print out a statement.
        -:  997:		    else {
        -:  998:		
        -:  999:		    	//No Card to Reveal
        -: 1000:			if (DEBUG) {
        -: 1001:			    printf("No cards to reveal\n");
        -: 1002:			}
        -: 1003:		    }
       42: 1004:		}
        -: 1005:
        -: 1006:		// Next player's combined discard and deck count is more than 1.
        -: 1007:		else {
        -: 1008:
        -: 1009:		    // If the player has no cards in their deck.	
      596: 1010:		    if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 1%
branch  1 taken 99%
        -: 1011:
        -: 1012:			// Move their discard pile to their deck and update discard and deck counts.    
       44: 1013:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 taken 95%
branch  1 taken 5%
       42: 1014:			    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
       42: 1015:			    state->deckCount[nextPlayer]++;
       42: 1016:			    state->discard[nextPlayer][i] = -1;
       42: 1017:			    state->discardCount[nextPlayer]--;
       42: 1018:			}
        -: 1019:
        -: 1020:			// shuffle(nextPlayer,state);//Shuffle the deck - Bug #1, Not shuffling the deck.
        2: 1021:		    }
        -: 1022:
        -: 1023:		    // Put the first two cards in the deck in tributeRevealedCards and update deckCount accordingly.
      596: 1024:		    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      596: 1025:		    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      596: 1026:		    state->deckCount[nextPlayer]--;
      596: 1027:		    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      596: 1028:		    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      596: 1029:		    state->deckCount[nextPlayer]--;
        -: 1030:		}
        -: 1031:
        -: 1032:		// If the tributeRevelead cards are the same card, mark the second card as played and only use
        -: 1033:		// the first card.
      638: 1034:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 96%
branch  1 taken 4%
      611: 1035:		    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      611: 1036:		    state->playedCardCount++;
        -: 1037:		//    tributeRevealedCards[1] = -1;	// Bug #2, not deleting 2nd tribute card.
      611: 1038:		}
        -: 1039:
        -: 1040:		// Look through tributeRevealed cards and see what kind they are.
     2552: 1041:		for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25%
        -: 1042:
        -: 1043:		    // If cards are Treasure cards, add two coins.	
     1914: 1044:		    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 98%
branch  1 taken 2%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       34: 1045:			state->coins += 2;
       34: 1046:		    }
        -: 1047:
        -: 1048:		    // If cards are Victory cards, draw two cards.
     1880: 1049:		    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
       22: 1050:			drawCard(currentPlayer, state);
       22: 1051:			drawCard(currentPlayer, state);
       22: 1052:		    }
        -: 1053:
        -: 1054:		    // If cards are Action cards, increase action by 2.
        -: 1055:		    else { //Action Card
     1858: 1056:			state->numActions = state->numActions + 2;
        -: 1057:		    }
     1914: 1058:		}
        -: 1059:
        -: 1060:		// Function successful.
      638: 1061:		return 0;
        -: 1062:	}
        -: 1063:
function cardEffect called 0 returned 0% blocks executed 0%
    #####: 1064:	int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1065:	{
        -: 1066:	    int i;
        -: 1067:	    int j;
        -: 1068:	    int k;
        -: 1069:	    int x;
        -: 1070:	    int index;
    #####: 1071:	    int currentPlayer = whoseTurn(state);
    #####: 1072:	    int nextPlayer = currentPlayer + 1;
        -: 1073:
    #####: 1074:	    int tributeRevealedCards[2] = {-1, -1};
        -: 1075:	    int temphand[MAX_HAND];// moved above the if statement
    #####: 1076:	    int drawntreasure=0;
        -: 1077:	    int cardDrawn;
    #####: 1078:	    int z = 0;// this is the counter for the temp hand
    #####: 1079:	    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####: 1080:		nextPlayer = 0;
    #####: 1081:	    }
        -: 1082:
        -: 1083:
        -: 1084:	    //uses switch to select card and perform actions
    #####: 1085:	    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1086:	    {
        -: 1087:		case adventurer:
    #####: 1088:			while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####: 1089:			    if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1090:				shuffle(currentPlayer, state);
    #####: 1091:			    }
    #####: 1092:			    drawCard(currentPlayer, state);
    #####: 1093:			    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1094:			    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1095:				drawntreasure++;
        -: 1096:			    else {
    #####: 1097:				temphand[z]=cardDrawn;
    #####: 1098:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1099:				z++;
        -: 1100:			    }
        -: 1101:			}
    #####: 1102:			while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####: 1103:			    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1104:			    z=z-1;
        -: 1105:			}
    #####: 1106:			return 0;
        -: 1107:			
        -: 1108:		case ambassador:
    #####: 1109:    			ambassadorCard(choice1, choice2, state, handPos);
        -: 1110:
        -: 1111:		case baron:
    #####: 1112:			baronCard(choice1, state);
        -: 1113:
        -: 1114:		case council_room:
        -: 1115:			//+4 Cards
    #####: 1116:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:			{
    #####: 1118:			    drawCard(currentPlayer, state);
    #####: 1119:			}
        -: 1120:
        -: 1121:			//+1 Buy
    #####: 1122:			state->numBuys++;
        -: 1123:
        -: 1124:			//Each other player draws a card
    #####: 1125:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:			{
    #####: 1127:			    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1128:			    {
    #####: 1129:				drawCard(i, state);
    #####: 1130:			    }
    #####: 1131:			}
        -: 1132:
        -: 1133:			//put played card in played card pile
    #####: 1134:			discardCard(handPos, currentPlayer, state, 0);
        -: 1135:
    #####: 1136:			return 0;
        -: 1137:
        -: 1138:		case feast:
        -: 1139:			//gain card with cost up to 5
        -: 1140:			//Backup hand
    #####: 1141:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1142:			    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1143:			    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1144:			}
        -: 1145:			//Backup hand
        -: 1146:
        -: 1147:			//Update Coins for Buy
    #####: 1148:			updateCoins(currentPlayer, state, 5);
    #####: 1149:			x = 1;//Condition to loop on
    #####: 1150:			while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1151:			    if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -: 1152:				if (DEBUG)
        -: 1153:				    printf("None of that card left, sorry!\n");
        -: 1154:
        -: 1155:				if (DEBUG) {
        -: 1156:				    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1157:				}
    #####: 1158:			    }
    #####: 1159:			    else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####: 1160:				printf("That card is too expensive!\n");
        -: 1161:
        -: 1162:				if (DEBUG) {
        -: 1163:				    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1164:				}
    #####: 1165:			    }
        -: 1166:			    else {
        -: 1167:
        -: 1168:				if (DEBUG) {
        -: 1169:				    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1170:				}
        -: 1171:
    #####: 1172:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1173:				x = 0;//No more buying cards
        -: 1174:
        -: 1175:				if (DEBUG) {
        -: 1176:				    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1177:				}
        -: 1178:
        -: 1179:			    }
        -: 1180:			}
        -: 1181:
        -: 1182:			//Reset Hand
    #####: 1183:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1184:			    state->hand[currentPlayer][i] = temphand[i];
    #####: 1185:			    temphand[i] = -1;
    #####: 1186:			}
        -: 1187:			//Reset Hand
        -: 1188:
    #####: 1189:			return 0;
        -: 1190:
        -: 1191:		case gardens:
    #####: 1192:			return -1;
        -: 1193:
        -: 1194:		case mine:
    #####: 1195:			mineCard(choice1, choice2, state, handPos);
        -: 1196:
        -: 1197:		case minion:
    #####: 1198:			minionCard(choice1, choice2, state, handPos);
        -: 1199:
        -: 1200:		case remodel:
    #####: 1201:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1202:
    #####: 1203:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1204:			{
    #####: 1205:			    return -1;
        -: 1206:			}
        -: 1207:
    #####: 1208:			gainCard(choice2, state, 0, currentPlayer);
        -: 1209:
        -: 1210:			//discard card from hand
    #####: 1211:			discardCard(handPos, currentPlayer, state, 0);
        -: 1212:
        -: 1213:			//discard trashed card
    #####: 1214:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:			{
    #####: 1216:			    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1217:			    {
    #####: 1218:				discardCard(i, currentPlayer, state, 0);
    #####: 1219:				break;
        -: 1220:			    }
    #####: 1221:			}
        -: 1222:
        -: 1223:
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case smithy:
        -: 1227:			//+3 Cards
    #####: 1228:			for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:			{
    #####: 1230:			    drawCard(currentPlayer, state);
    #####: 1231:			}
        -: 1232:
        -: 1233:			//discard card from hand
    #####: 1234:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:			return 0;
        -: 1236:		
        -: 1237:		case tribute:
    #####: 1238:			tributeCard(state);
        -: 1239:
        -: 1240:		case village:
        -: 1241:			//+1 Card
    #####: 1242:			drawCard(currentPlayer, state);
        -: 1243:
        -: 1244:			//+2 Actions
    #####: 1245:			state->numActions = state->numActions + 2;
        -: 1246:
        -: 1247:			//discard played card from hand
    #####: 1248:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1249:			return 0;
        -: 1250:
        -: 1251:
        -: 1252:		case great_hall:
        -: 1253:			//+1 Card
    #####: 1254:			drawCard(currentPlayer, state);
        -: 1255:
        -: 1256:			//+1 Actions
    #####: 1257:			state->numActions++;
        -: 1258:
        -: 1259:			//discard card from hand
    #####: 1260:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1261:			return 0;
        -: 1262:
        -: 1263:
        -: 1264:		case steward:
    #####: 1265:			if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1266:			{
        -: 1267:			    //+2 cards
    #####: 1268:			    drawCard(currentPlayer, state);
    #####: 1269:			    drawCard(currentPlayer, state);
    #####: 1270:			}
    #####: 1271:			else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1272:			{
        -: 1273:			    //+2 coins
    #####: 1274:			    state->coins = state->coins + 2;
    #####: 1275:			}
        -: 1276:			else
        -: 1277:			{
        -: 1278:			    //trash 2 cards in hand
    #####: 1279:			    discardCard(choice2, currentPlayer, state, 1);
    #####: 1280:			    discardCard(choice3, currentPlayer, state, 1);
        -: 1281:			}
        -: 1282:
        -: 1283:			//discard card from hand
    #####: 1284:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1285:			return 0;
        -: 1286:
        -: 1287:		case cutpurse:
        -: 1288:
    #####: 1289:			updateCoins(currentPlayer, state, 2);
    #####: 1290:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1291:			{
    #####: 1292:			    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1293:			    {
    #####: 1294:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1295:				{
    #####: 1296:				    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1297:				    {
    #####: 1298:					discardCard(j, i, state, 0);
    #####: 1299:					break;
        -: 1300:				    }
    #####: 1301:				    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1302:				    {
    #####: 1303:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1304:					{
        -: 1305:					    if (DEBUG)
        -: 1306:						printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1307:					}
    #####: 1308:					break;
        -: 1309:				    }
    #####: 1310:				}
        -: 1311:
    #####: 1312:			    }
        -: 1313:
    #####: 1314:			}
        -: 1315:
        -: 1316:			//discard played card from hand
    #####: 1317:			discardCard(handPos, currentPlayer, state, 0);
        -: 1318:
    #####: 1319:			return 0;
        -: 1320:
        -: 1321:
        -: 1322:		    case embargo:
        -: 1323:			//+2 Coins
    #####: 1324:			state->coins = state->coins + 2;
        -: 1325:
        -: 1326:			//see if selected pile is in play
    #####: 1327:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1328:			{
    #####: 1329:			    return -1;
        -: 1330:			}
        -: 1331:
        -: 1332:			//add embargo token to selected supply pile
    #####: 1333:			state->embargoTokens[choice1]++;
        -: 1334:
        -: 1335:			//trash card
    #####: 1336:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1337:			return 0;
        -: 1338:
        -: 1339:		    case outpost:
        -: 1340:			//set outpost flag
    #####: 1341:			state->outpostPlayed++;
        -: 1342:
        -: 1343:			//discard card
    #####: 1344:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1345:			return 0;
        -: 1346:
        -: 1347:		    case salvager:
        -: 1348:			//+1 buy
    #####: 1349:			state->numBuys++;
        -: 1350:
    #####: 1351:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1352:			{
        -: 1353:			    //gain coins equal to trashed card
    #####: 1354:			    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1355:			    //trash card
    #####: 1356:			    discardCard(choice1, currentPlayer, state, 1);
    #####: 1357:			}
        -: 1358:
        -: 1359:			//discard card
    #####: 1360:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1361:			return 0;
        -: 1362:
        -: 1363:		    case sea_hag:
    #####: 1364:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1365:			    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1366:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1367:				state->deckCount[i]--;
    #####: 1368:				state->discardCount[i]++;
    #####: 1369:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1370:			    }
    #####: 1371:			}
    #####: 1372:			return 0;
        -: 1373:
        -: 1374:		    case treasure_map:
        -: 1375:			//search hand for another treasure_map
    #####: 1376:			index = -1;
    #####: 1377:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1378:			{
    #####: 1379:			    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1380:			    {
    #####: 1381:				index = i;
    #####: 1382:				break;
        -: 1383:			    }
    #####: 1384:			}
    #####: 1385:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1386:			{
        -: 1387:			    //trash both treasure cards
    #####: 1388:			    discardCard(handPos, currentPlayer, state, 1);
    #####: 1389:			    discardCard(index, currentPlayer, state, 1);
        -: 1390:
        -: 1391:			    //gain 4 Gold cards
    #####: 1392:			    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1393:			    {
    #####: 1394:				gainCard(gold, state, 1, currentPlayer);
    #####: 1395:			    }
        -: 1396:
        -: 1397:			    //return success
    #####: 1398:			    return 1;
        -: 1399:			}
        -: 1400:
        -: 1401:			//no second treasure_map found in hand
    #####: 1402:			return -1;
        -: 1403:		    }
        -: 1404:
    #####: 1405:		    return -1;
    #####: 1406:		}
        -: 1407:
function discardCard called 10071 returned 100% blocks executed 80%
    10071: 1408:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1409:{
        -: 1410:
        -: 1411:    //if card is not trashed, added to Played pile
    10071: 1412:    if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1413:    {
        -: 1414:        //add card to played pile
    10064: 1415:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    10064: 1416:        state->playedCardCount++;
    10064: 1417:    }
        -: 1418:
        -: 1419:    //set played card to -1
    10071: 1420:    state->hand[currentPlayer][handPos] = -1;
        -: 1421:
        -: 1422:    //remove card from player's hand
    10071: 1423:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1424:    {
        -: 1425:        //reduce number of cards in hand
    #####: 1426:        state->handCount[currentPlayer]--;
    #####: 1427:    }
    10071: 1428:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1429:    {
        -: 1430:        //reduce number of cards in hand
    #####: 1431:        state->handCount[currentPlayer]--;
    #####: 1432:    }
        -: 1433:    else
        -: 1434:    {
        -: 1435:        //replace discarded card with last card in hand
    10071: 1436:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1437:        //set last card to -1
    10071: 1438:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1439:        //reduce number of cards in hand
    10071: 1440:        state->handCount[currentPlayer]--;
        -: 1441:    }
        -: 1442:
    10071: 1443:    return 0;
        -: 1444:}
        -: 1445:
function gainCard called 4399 returned 100% blocks executed 81%
     4399: 1446:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1447:{
        -: 1448:    //Note: supplyPos is enum of choosen card
        -: 1449:
        -: 1450:    //check if supply pile is empty (0) or card is not used in game (-1)
     4399: 1451:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1452:    {
    #####: 1453:        return -1;
        -: 1454:    }
        -: 1455:
        -: 1456:    //added card for [whoseTurn] current player:
        -: 1457:    // toFlag = 0 : add to discard
        -: 1458:    // toFlag = 1 : add to deck
        -: 1459:    // toFlag = 2 : add to hand
        -: 1460:
     4399: 1461:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1462:    {
    #####: 1463:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1464:        state->deckCount[player]++;
    #####: 1465:    }
     4399: 1466:    else if (toFlag == 2)
branch  0 taken 1%
branch  1 taken 99%
        -: 1467:    {
        5: 1468:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1469:        state->handCount[player]++;
        5: 1470:    }
        -: 1471:    else
        -: 1472:    {
     4394: 1473:        state->discard[player][ state->discardCount[player] ] = supplyPos;
     4394: 1474:        state->discardCount[player]++;
        -: 1475:    }
        -: 1476:
        -: 1477:    //decrease number in supply pile
     4399: 1478:    state->supplyCount[supplyPos]--;
        -: 1479:
     4399: 1480:    return 0;
     4399: 1481:}
        -: 1482:
function updateCoins called 16143 returned 100% blocks executed 85%
    16143: 1483:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1484:{
        -: 1485:    int i;
        -: 1486:
        -: 1487:    //reset coin count
    16143: 1488:    state->coins = 0;
        -: 1489:
        -: 1490:    //add coins for each Treasure card in player's hand
    96858: 1491:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1492:    {
    80715: 1493:        if (state->hand[player][i] == copper)
branch  0 taken 79%
branch  1 taken 21%
        -: 1494:        {
    63696: 1495:            state->coins += 1;
    63696: 1496:        }
    17019: 1497:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1498:        {
    #####: 1499:            state->coins += 2;
    #####: 1500:        }
    17019: 1501:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1502:        {
    #####: 1503:            state->coins += 3;
    #####: 1504:        }
    80715: 1505:    }
        -: 1506:
        -: 1507:    //add bonus
    16143: 1508:    state->coins += bonus;
        -: 1509:
    16143: 1510:    return 0;
        -: 1511:}
        -: 1512:
        -: 1513:
        -: 1514://end of dominion.c
